declare var nameStartChar: RegExp;
declare var nameChar: RegExp;
declare var tagNamePattern: RegExp;
declare var S_TAG: number;
declare var S_ATTR: number;
declare var S_ATTR_SPACE: number;
declare var S_EQ: number;
declare var S_ATTR_NOQUOT_VALUE: number;
declare var S_ATTR_END: number;
declare var S_TAG_SPACE: number;
declare var S_TAG_CLOSE: number;
declare function XMLReader(): void;
declare function parse(source: any, defaultNSMapCopy: any, entityMap: any, domBuilder: any, errorHandler: any): void;
declare function copyLocator(f: any, t: any): any;
/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
declare function parseElementStartPart(source: any, start: any, el: any, currentNSMap: any, entityReplacer: any, errorHandler: any): number;
/**
 * @return true if has new namespace define
 */
declare function appendElement(el: any, domBuilder: any, currentNSMap: any): true | undefined;
declare function parseHtmlSpecialContent(source: any, elStartEnd: any, tagName: any, entityReplacer: any, domBuilder: any): any;
declare function fixSelfClosed(source: any, elStartEnd: any, tagName: any, closeMap: any): boolean;
declare function _copy(source: any, target: any): void;
declare function parseDCC(source: any, start: any, domBuilder: any, errorHandler: any): any;
declare function parseInstruction(source: any, start: any, domBuilder: any): any;
/**
 * @param source
 */
declare function ElementAttributes(source: any): void;
declare function split(source: any, start: any): RegExpExecArray[] | undefined;
