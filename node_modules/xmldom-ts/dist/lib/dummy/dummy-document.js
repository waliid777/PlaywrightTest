"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("../types");
const node_1 = require("../node");
class DummyDocument extends node_1.NodeImpl {
    constructor() {
        super(...arguments);
        this.ownerDocument = null;
    }
    get styleSheets() {
        throw new Error('Property not implemented.');
    }
    createElement(_tagName) {
        throw new Error('Method not implemented.');
    }
    createDocumentFragment() {
        throw new Error('Method not implemented.');
    }
    createTextNode(_data) {
        throw new Error('Method not implemented.');
    }
    createComment(_data) {
        throw new Error('Method not implemented.');
    }
    createCDATASection(_data) {
        throw new Error('Method not implemented.');
    }
    createProcessingInstruction(_target, _data) {
        throw new Error('Method not implemented.');
    }
    createAttribute(_name) {
        throw new Error('Method not implemented.');
    }
    createEntityReference(_name) {
        throw new Error('Method not implemented.');
    }
    createElementNS(_namespaceURI, _qualifiedName) {
        throw new Error('Method not implemented.');
    }
    createAttributeNS(_namespaceURI, _qualifiedName) {
        throw new Error('Method not implemented.');
    }
    createExpression(_expression, _resolver) {
        throw new Error('Method not implemented.');
    }
    createNSResolver(_nodeResolver) {
        throw new Error('Method not implemented.');
    }
    get URL() {
        throw new Error('Property not implemented.');
    }
    get activeElement() {
        throw new Error('Property not implemented.');
    }
    get alinkColor() {
        throw new Error('Property not implemented.');
    }
    get all() {
        throw new Error('Property not implemented.');
    }
    get anchors() {
        throw new Error('Property not implemented.');
    }
    get applets() {
        throw new Error('Property not implemented.');
    }
    get bgColor() {
        throw new Error('Property not implemented.');
    }
    get body() {
        throw new Error('Property not implemented.');
    }
    get characterSet() {
        throw new Error('Property not implemented.');
    }
    get charset() {
        throw new Error('Property not implemented.');
    }
    get compatMode() {
        throw new Error('Property not implemented.');
    }
    get contentType() {
        throw new Error('Property not implemented.');
    }
    get cookie() {
        throw new Error('Property not implemented.');
    }
    get currentScript() {
        throw new Error('Property not implemented.');
    }
    get defaultView() {
        throw new Error('Property not implemented.');
    }
    get designMode() {
        throw new Error('Property not implemented.');
    }
    get dir() {
        throw new Error('Property not implemented.');
    }
    get domain() {
        throw new Error('Property not implemented.');
    }
    get embeds() {
        throw new Error('Property not implemented.');
    }
    get fgColor() {
        throw new Error('Property not implemented.');
    }
    get forms() {
        throw new Error('Property not implemented.');
    }
    get fullscreen() {
        throw new Error('Property not implemented.');
    }
    get fullscreenEnabled() {
        throw new Error('Property not implemented.');
    }
    get head() {
        throw new Error('Property not implemented.');
    }
    get hidden() {
        throw new Error('Property not implemented.');
    }
    get images() {
        throw new Error('Property not implemented.');
    }
    get inputEncoding() {
        throw new Error('Property not implemented.');
    }
    get lastModified() {
        throw new Error('Property not implemented.');
    }
    get linkColor() {
        throw new Error('Property not implemented.');
    }
    get links() {
        throw new Error('Property not implemented.');
    }
    get location() {
        throw new Error('Property not implemented.');
    }
    get onfullscreenchange() {
        throw new Error('Property not implemented.');
    }
    get onfullscreenerror() {
        throw new Error('Property not implemented.');
    }
    get onpointerlockchange() {
        throw new Error('Property not implemented.');
    }
    get onpointerlockerror() {
        throw new Error('Property not implemented.');
    }
    get onreadystatechange() {
        throw new Error('Property not implemented.');
    }
    get onvisibilitychange() {
        throw new Error('Property not implemented.');
    }
    get origin() {
        throw new Error('Property not implemented.');
    }
    get plugins() {
        throw new Error('Property not implemented.');
    }
    get readyState() {
        throw new Error('Property not implemented.');
    }
    get referrer() {
        throw new Error('Property not implemented.');
    }
    get scripts() {
        throw new Error('Property not implemented.');
    }
    get scrollingElement() {
        throw new Error('Property not implemented.');
    }
    get timeline() {
        throw new Error('Property not implemented.');
    }
    get title() {
        throw new Error('Property not implemented.');
    }
    get visibilityState() {
        throw new Error('Property not implemented.');
    }
    get vlinkColor() {
        throw new Error('Property not implemented.');
    }
    adoptNode(_source) {
        throw new Error('Method not implemented.');
    }
    captureEvents() {
        throw new Error('Method not implemented.');
    }
    caretPositionFromPoint(_x, _y) {
        throw new Error('Method not implemented.');
    }
    caretRangeFromPoint(_x, _y) {
        throw new Error('Method not implemented.');
    }
    clear() {
        throw new Error('Method not implemented.');
    }
    close() {
        throw new Error('Method not implemented.');
    }
    createEvent(_eventInterface) {
        throw new Error('Method not implemented.');
    }
    createNodeIterator(_root, _whatToShow, _filter) {
        throw new Error('Method not implemented.');
    }
    createRange() {
        throw new Error('Method not implemented.');
    }
    createTouch(_view, _target, _identifier, _pageX, _pageY, _screenX, _screenY) {
        throw new Error('Method not implemented.');
    }
    createTouchList(..._touches) {
        throw new Error('Method not implemented.');
    }
    createTreeWalker(_root, _whatToShow, _filter, _entityReferenceExpansion) {
        throw new Error('Method not implemented.');
    }
    elementFromPoint(_x, _y) {
        throw new Error('Method not implemented.');
    }
    elementsFromPoint(_x, _y) {
        throw new Error('Method not implemented.');
    }
    evaluate(_expression, _contextNode, _resolver, _type, _result) {
        throw new Error('Method not implemented.');
    }
    execCommand(_commandId, _showUI, _value) {
        throw new Error('Method not implemented.');
    }
    exitFullscreen() {
        throw new Error('Method not implemented.');
    }
    exitPointerLock() {
        throw new Error('Method not implemented.');
    }
    getAnimations() {
        throw new Error('Method not implemented.');
    }
    getElementById(_elementId) {
        throw new Error('Method not implemented.');
    }
    getElementsByClassName(_classNames) {
        throw new Error('Method not implemented.');
    }
    getElementsByName(_elementName) {
        throw new Error('Method not implemented.');
    }
    getElementsByTagName(_qualifiedName) {
        throw new Error('Method not implemented.');
    }
    getElementsByTagNameNS(_namespaceURI, _localName) {
        throw new Error('Method not implemented.');
    }
    getSelection() {
        throw new Error('Method not implemented.');
    }
    hasFocus() {
        throw new Error('Method not implemented.');
    }
    importNode(_importedNode, _deep) {
        throw new Error('Method not implemented.');
    }
    open(_url, _name, _features, _replace) {
        throw new Error('Method not implemented.');
    }
    queryCommandEnabled(_commandId) {
        throw new Error('Method not implemented.');
    }
    queryCommandIndeterm(_commandId) {
        throw new Error('Method not implemented.');
    }
    queryCommandState(_commandId) {
        throw new Error('Method not implemented.');
    }
    queryCommandSupported(_commandId) {
        throw new Error('Method not implemented.');
    }
    queryCommandValue(_commandId) {
        throw new Error('Method not implemented.');
    }
    releaseEvents() {
        throw new Error('Method not implemented.');
    }
    write(..._text) {
        throw new Error('Method not implemented.');
    }
    writeln(..._text) {
        throw new Error('Method not implemented.');
    }
    get fullscreenElement() {
        throw new Error('Property not implemented.');
    }
    get pointerLockElement() {
        throw new Error('Property not implemented.');
    }
}
exports.DummyDocument = DummyDocument;
//# sourceMappingURL=dummy-document.js.map