"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("../types");
const node_1 = require("../node");
class DummyElement extends node_1.NodeImpl {
    get accessKey() {
        throw new Error('Property not implemented.');
    }
    get accessKeyLabel() {
        throw new Error('Property not implemented.');
    }
    get autocapitalize() {
        throw new Error('Property not implemented.');
    }
    get dir() {
        throw new Error('Property not implemented.');
    }
    get draggable() {
        throw new Error('Property not implemented.');
    }
    get hidden() {
        throw new Error('Property not implemented.');
    }
    get innerText() {
        throw new Error('Property not implemented.');
    }
    get lang() {
        throw new Error('Property not implemented.');
    }
    get offsetHeight() {
        throw new Error('Property not implemented.');
    }
    get offsetLeft() {
        throw new Error('Property not implemented.');
    }
    get offsetParent() {
        throw new Error('Property not implemented.');
    }
    get offsetTop() {
        throw new Error('Property not implemented.');
    }
    get offsetWidth() {
        throw new Error('Property not implemented.');
    }
    get spellcheck() {
        throw new Error('Property not implemented.');
    }
    get title() {
        throw new Error('Property not implemented.');
    }
    get translate() {
        throw new Error('Property not implemented.');
    }
    click() {
        throw new Error('Method not implemented.');
    }
    get contentEditable() {
        throw new Error('Property not implemented.');
    }
    get inputMode() {
        throw new Error('Property not implemented.');
    }
    get isContentEditable() {
        throw new Error('Property not implemented.');
    }
    get dataset() {
        throw new Error('Property not implemented.');
    }
    get nonce() {
        throw new Error('Property not implemented.');
    }
    get tabIndex() {
        throw new Error('Property not implemented.');
    }
    blur() {
        throw new Error('Method not implemented.');
    }
    focus(_options) {
        throw new Error('Method not implemented.');
    }
    get style() {
        throw new Error('Property not implemented.');
    }
    get assignedSlot() {
        throw new Error('Property not implemented.');
    }
    get classList() {
        throw new Error('Property not implemented.');
    }
    get className() {
        throw new Error('Property not implemented.');
    }
    get clientHeight() {
        throw new Error('Property not implemented.');
    }
    get clientLeft() {
        throw new Error('Property not implemented.');
    }
    get clientTop() {
        throw new Error('Property not implemented.');
    }
    get clientWidth() {
        throw new Error('Property not implemented.');
    }
    get id() {
        throw new Error('Property not implemented.');
    }
    get innerHTML() {
        throw new Error('Property not implemented.');
    }
    get onfullscreenchange() {
        throw new Error('Property not implemented.');
    }
    get onfullscreenerror() {
        throw new Error('Property not implemented.');
    }
    get outerHTML() {
        throw new Error('Property not implemented.');
    }
    get scrollHeight() {
        throw new Error('Property not implemented.');
    }
    get scrollLeft() {
        throw new Error('Property not implemented.');
    }
    get scrollTop() {
        throw new Error('Property not implemented.');
    }
    get scrollWidth() {
        throw new Error('Property not implemented.');
    }
    get shadowRoot() {
        throw new Error('Property not implemented.');
    }
    get slot() {
        throw new Error('Property not implemented.');
    }
    attachShadow(_init) {
        throw new Error('Method not implemented.');
    }
    closest(_selector) {
        throw new Error('Method not implemented.');
    }
    getAttribute(_qualifiedName) {
        throw new Error('Method not implemented.');
    }
    getAttributeNS(_namespace, _localName) {
        throw new Error('Method not implemented.');
    }
    getAttributeNames() {
        throw new Error('Method not implemented.');
    }
    getAttributeNode(_name) {
        throw new Error('Method not implemented.');
    }
    getAttributeNodeNS(_namespaceURI, _localName) {
        throw new Error('Method not implemented.');
    }
    getBoundingClientRect() {
        throw new Error('Method not implemented.');
    }
    getClientRects() {
        throw new Error('Method not implemented.');
    }
    getElementsByClassName(_classNames) {
        throw new Error('Method not implemented.');
    }
    getElementsByTagName(_qualifiedName) {
        throw new Error('Method not implemented.');
    }
    getElementsByTagNameNS(_namespaceURI, _localName) {
        throw new Error('Method not implemented.');
    }
    hasAttribute(_qualifiedName) {
        throw new Error('Method not implemented.');
    }
    hasAttributeNS(_namespace, _localName) {
        throw new Error('Method not implemented.');
    }
    hasPointerCapture(_pointerId) {
        throw new Error('Method not implemented.');
    }
    insertAdjacentElement(_position, _insertedElement) {
        throw new Error('Method not implemented.');
    }
    insertAdjacentHTML(_where, _html) {
        throw new Error('Method not implemented.');
    }
    insertAdjacentText(_where, _text) {
        throw new Error('Method not implemented.');
    }
    matches(_selectors) {
        throw new Error('Method not implemented.');
    }
    msGetRegionContent() {
        throw new Error('Method not implemented.');
    }
    releasePointerCapture(_pointerId) {
        throw new Error('Method not implemented.');
    }
    removeAttribute(_qualifiedName) {
        throw new Error('Method not implemented.');
    }
    removeAttributeNS(_namespace, _localName) {
        throw new Error('Method not implemented.');
    }
    removeAttributeNode(_attr) {
        throw new Error('Method not implemented.');
    }
    requestFullscreen(_options) {
        throw new Error('Method not implemented.');
    }
    requestPointerLock() {
        throw new Error('Method not implemented.');
    }
    scroll(_x, _y) {
        throw new Error('Method not implemented.');
    }
    scrollBy(_x, _y) {
        throw new Error('Method not implemented.');
    }
    scrollIntoView(_arg) {
        throw new Error('Method not implemented.');
    }
    scrollTo(_x, _y) {
        throw new Error('Method not implemented.');
    }
    setAttribute(_qualifiedName, _value) {
        throw new Error('Method not implemented.');
    }
    setAttributeNS(_namespace, _qualifiedName, _value) {
        throw new Error('Method not implemented.');
    }
    setAttributeNode(_attr) {
        throw new Error('Method not implemented.');
    }
    setAttributeNodeNS(_attr) {
        throw new Error('Method not implemented.');
    }
    setPointerCapture(_pointerId) {
        throw new Error('Method not implemented.');
    }
    toggleAttribute(_qualifiedName, _force) {
        throw new Error('Method not implemented.');
    }
    webkitMatchesSelector(_selectors) {
        throw new Error('Method not implemented.');
    }
    get nextElementSibling() {
        throw new Error('Property not implemented.');
    }
    get previousElementSibling() {
        throw new Error('Property not implemented.');
    }
    animate(_keyframes, _options) {
        throw new Error('Method not implemented.');
    }
    getAnimations() {
        throw new Error('Method not implemented.');
    }
}
exports.DummyElement = DummyElement;
//# sourceMappingURL=dummy-element.js.map